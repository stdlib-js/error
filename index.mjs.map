{"version":3,"file":"index.mjs","sources":["../reviver/lib/ctors.js","../reviver/lib/main.js","../reviver/lib/index.js","../to-json/lib/ctors.js","../to-json/lib/type.js","../to-json/lib/main.js","../to-json/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar CTORS = {\n\t'Error': Error,\n\t'TypeError': TypeError,\n\t'SyntaxError': SyntaxError,\n\t'ReferenceError': ReferenceError,\n\t'URIError': URIError,\n\t'EvalError': EvalError,\n\t'RangeError': RangeError\n};\n\n\n// EXPORTS //\n\nmodule.exports = CTORS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar objectKeys = require( '@stdlib/utils/keys' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar ctors = require( './ctors.js' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized error object.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Error|SyntaxError|URIError|EvalError|ReferenceError|RangeError|TypeError)} value or error object\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n*\n* var str = '{\"type\":\"TypeError\",\"message\":\"beep\"}';\n* var err = parseJSON( str, reviveError );\n* // returns <TypeError>\n*/\nfunction reviveError( key, value ) {\n\tvar hasStack;\n\tvar ctor;\n\tvar keys;\n\tvar err;\n\tvar k;\n\tvar i;\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tisString( value.message )\n\t) {\n\t\tctor = ctors[ value.type ];\n\t\tif ( ctor ) {\n\t\t\terr = new ctor( value.message );\n\t\t\tkeys = objectKeys( value );\n\t\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t\tk = keys[ i ];\n\t\t\t\tif (\n\t\t\t\t\tk === 'type' ||\n\t\t\t\t\tk === 'message' ||\n\t\t\t\t\tk === 'name' // read-only for built-ins\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ( k === 'stack' ) {\n\t\t\t\t\tif ( !isString( value[k] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\thasStack = true;\n\t\t\t\t}\n\t\t\t\terr[ k ] = value[ k ];\n\t\t\t}\n\t\t\tif ( !hasStack && isString( err.stack ) ) {\n\t\t\t\terr.stack = '';\n\t\t\t}\n\t\t\treturn err;\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveError;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized error object.\n*\n* @module @stdlib/error/reviver\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n* var reviver = require( '@stdlib/error/reviver' );\n*\n* var str = '{\"type\":\"TypeError\",\"message\":\"beep\"}';\n* var err = parseJSON( str, reviver );\n* // returns <TypeError>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar CTORS = [\n\t[ TypeError, 'TypeError' ],\n\t[ SyntaxError, 'SyntaxError' ],\n\t[ ReferenceError, 'ReferenceError' ],\n\t[ RangeError, 'RangeError' ],\n\t[ URIError, 'URIError' ],\n\t[ EvalError, 'EvalError' ],\n\t[ Error, 'Error' ]\n];\n\n\n// EXPORTS //\n\nmodule.exports = CTORS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar instanceOf = require( '@stdlib/assert/instance-of' );\nvar ctorName = require( '@stdlib/utils/constructor-name' );\nvar getPrototypeOf = require( '@stdlib/utils/get-prototype-of' );\nvar CTORS = require( './ctors.js' );\n\n\n// MAIN //\n\n/**\n* Returns the error type.\n*\n* @private\n* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error - input error\n* @returns {(string|void)} error type\n*\n* @example\n* var err = new TypeError();\n* var out = typeName( err );\n* // returns 'TypeError'\n*/\nfunction typeName( error ) {\n\tvar v;\n\tvar i;\n\n\t// Check for error objects from the same realm (same Node.js `vm` or same `Window` object)...\n\tfor ( i = 0; i < CTORS.length; i++ ) {\n\t\tif ( instanceOf( error, CTORS[ i ][ 0 ] ) ) {\n\t\t\treturn CTORS[ i ][ 1 ];\n\t\t}\n\t}\n\t// Walk the prototype tree until we find an object having a desired native class...\n\twhile ( error ) {\n\t\tv = ctorName( error );\n\t\tfor ( i = 0; i < CTORS.length; i++ ) {\n\t\t\tif ( v === CTORS[ i ][ 1 ] ) {\n\t\t\t\treturn CTORS[ i ][ 1 ];\n\t\t\t}\n\t\t}\n\t\terror = getPrototypeOf( error );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = typeName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar objectKeys = require( '@stdlib/utils/keys' );\nvar copy = require( '@stdlib/utils/copy' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar format = require( '@stdlib/string/format' );\nvar typeName = require( './type.js' );\n\n\n// MAIN //\n\n/**\n* Returns a JSON representation of an error object.\n*\n* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} err - error to serialize\n* @throws {TypeError} must provide an error object\n* @returns {Object} JSON representation\n*\n* @example\n* var err = new Error( 'beep' );\n* var json = error2json( err );\n* // returns {...}\n*/\nfunction error2json( err ) {\n\tvar keys;\n\tvar out;\n\tvar i;\n\tif ( !isError( err ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an error object. Value: `%s`.', err ) );\n\t}\n\tout = {};\n\n\t// Guaranteed properties:\n\tout.type = typeName( err );\n\tout.message = err.message;\n\n\t// Possible general error properties...\n\tif ( err.name ) {\n\t\tout.name = err.name;\n\t}\n\tif ( err.stack ) {\n\t\tout.stack = err.stack;\n\t}\n\t// Possible Node.js (system error) properties...\n\tif ( err.code ) {\n\t\tout.code = err.code;\n\t}\n\tif ( err.errno ) {\n\t\tout.errno = err.errno;\n\t}\n\tif ( err.syscall ) {\n\t\tout.syscall = err.syscall;\n\t}\n\t// Any enumerable properties...\n\tkeys = objectKeys( err );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tout[ keys[i] ] = copy( err[ keys[i] ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = error2json;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a JSON representation of an error object.\n*\n* @module @stdlib/error/to-json\n*\n* @example\n* var error2json = require( '@stdlib/error/to-json' );\n*\n* var err = new Error( 'beep' );\n* var json = error2json( err );\n* // returns <Object>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n/*\n* The following modules are intentionally not exported: tools\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name reviveError\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/error/reviver}\n*/\nimport reviveError from './../reviver';\nsetReadOnly( ns, 'reviveError', reviveError );\n\n/**\n* @name error2json\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/error/to-json}\n*/\nimport error2json from './../to-json';\nsetReadOnly( ns, 'error2json', error2json );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["ctors","Error","TypeError","SyntaxError","ReferenceError","URIError","EvalError","RangeError","objectKeys","require$$0","isString","require$$1","isPrimitive","require$$2","lib","key","value","hasStack","ctor","keys","err","k","i","type","message","length","stack","CTORS","instanceOf","ctorName","getPrototypeOf","copy","isError","format","require$$3","typeName","error","v","out","name","code","errno","syscall","ns","setReadOnly","reviveError","error2json"],"mappings":";;wwBAsBA,IAaAA,EAbY,CACXC,MAASA,MACTC,UAAaA,UACbC,YAAeA,YACfC,eAAkBA,eAClBC,SAAYA,SACZC,UAAaA,UACbC,WAAcA,YCPXC,EAAaC,EACbC,EAAWC,EAAsCC,YACjDZ,EAAQa,EAgEZ,IC/CAC,EDEA,SAAsBC,EAAKC,GAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GACCN,GACAA,EAAMO,MACNb,EAAUM,EAAMQ,WAEhBN,EAAOlB,EAAOgB,EAAMO,OACR,CAGX,IAFAH,EAAM,IAAIF,EAAMF,EAAMQ,SACtBL,EAAOX,EAAYQ,GACbM,EAAI,EAAGA,EAAIH,EAAKM,OAAQH,IAE7B,GACO,UAFPD,EAAIF,EAAMG,KAGH,YAAND,GACM,SAANA,EAHD,CAOA,GAAW,UAANA,EAAgB,CACpB,IAAMX,EAAUM,EAAMK,IACrB,SAEDJ,GAAW,CACX,CACDG,EAAKC,GAAML,EAAOK,EAPjB,CAYF,OAHMJ,GAAYP,EAAUU,EAAIM,SAC/BN,EAAIM,MAAQ,IAENN,CACP,CAEF,OAAOJ,CACR,EE7DIW,EAAQ,CACX,CAAEzB,UAAW,aACb,CAAEC,YAAa,eACf,CAAEC,eAAgB,kBAClB,CAAEG,WAAY,cACd,CAAEF,SAAU,YACZ,CAAEC,UAAW,aACb,CAAEL,MAAO,UCPN2B,EAAanB,EACboB,EAAWlB,EACXmB,EAAiBjB,EACjBc,EDUaA,ECgCjB,IC7CInB,EAAaC,EACbsB,EAAOpB,EACPqB,EAAUnB,EACVoB,EAASC,EACTC,EDgBJ,SAAmBC,GAClB,IAAIC,EACAf,EAGJ,IAAMA,EAAI,EAAGA,EAAIK,EAAMF,OAAQH,IAC9B,GAAKM,EAAYQ,EAAOT,EAAOL,GAAK,IACnC,OAAOK,EAAOL,GAAK,GAIrB,KAAQc,GAAQ,CAEf,IADAC,EAAIR,EAAUO,GACRd,EAAI,EAAGA,EAAIK,EAAMF,OAAQH,IAC9B,GAAKe,IAAMV,EAAOL,GAAK,GACtB,OAAOK,EAAOL,GAAK,GAGrBc,EAAQN,EAAgBM,EACxB,CACF,ECsBA,IC5CAtB,EDGA,SAAqBM,GACpB,IAAID,EACAmB,EACAhB,EACJ,IAAMU,EAASZ,GACd,MAAM,IAAIlB,UAAW+B,EAAQ,+DAAgEb,IA2B9F,KAzBAkB,EAAM,CAAA,GAGFf,KAAOY,EAAUf,GACrBkB,EAAId,QAAUJ,EAAII,QAGbJ,EAAImB,OACRD,EAAIC,KAAOnB,EAAImB,MAEXnB,EAAIM,QACRY,EAAIZ,MAAQN,EAAIM,OAGZN,EAAIoB,OACRF,EAAIE,KAAOpB,EAAIoB,MAEXpB,EAAIqB,QACRH,EAAIG,MAAQrB,EAAIqB,OAEZrB,EAAIsB,UACRJ,EAAII,QAAUtB,EAAIsB,SAGnBvB,EAAOX,EAAYY,GACbE,EAAI,EAAGA,EAAIH,EAAKM,OAAQH,IAC7BgB,EAAKnB,EAAKG,IAAOS,EAAMX,EAAKD,EAAKG,KAElC,OAAOgB,CACR,EEvCAK,EAAA,CAAA,EAUAC,EAAAD,EAAA,cAAAE,GAUAD,EAAAD,EAAA,aAAAG"}